[metadata]
name = valori
version = 0.1.1
author = Varshith
author_email = varshith.gudur17@gmail.com
description = A high-performance vector database library for Python
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/varshith-Git/valori
project_urls =
    Bug Tracker = https://github.com/varshith-Git/valori/issues
    Documentation = https://github.com/varshith-Git/valori
    Source Code = https://github.com/varshith-Git/valori
license = MIT
license_file = LICENSE
classifiers =
    Development Status :: 4 - Beta
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Topic :: Scientific/Engineering :: Artificial Intelligence
    Topic :: Database
    Topic :: Software Development :: Libraries :: Python Modules

[options]
package_dir =
    = src
packages = find:
python_requires = >=3.8
install_requires =
    numpy>=1.19.0
    scikit-learn>=0.24.0
    pathlib2>=2.3.0; python_version<'3.4'

[options.packages.find]
where = src

[options.extras_require]
dev =
    pytest>=6.0
    pytest-cov>=2.0
    pytest-xdist>=2.0
    black>=21.0
    flake8>=3.8
    mypy>=0.910
    pre-commit>=2.0
    sphinx>=4.0
    sphinx-rtd-theme>=0.5
    safety>=1.10
    bandit>=1.7
docs =
    sphinx>=4.0
    sphinx-rtd-theme>=0.5
    sphinx-autodoc-typehints>=1.12
benchmark =
    matplotlib>=3.3
    seaborn>=0.11
    pandas>=1.3

[options.entry_points]
console_scripts =
    valori-benchmark = scripts.benchmark:main

[options.package_data]
valori = py.typed

[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = .git,__pycache__,build,dist,*.egg-info,.venv,.env

[coverage:run]
source = src/valori
omit = */tests/*,*/test_*,*/__pycache__/*,*/venv/*,*/env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[mypy]
# Keep existing strictness but silence missing stubs for a few heavy external libs
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

# Silence missing-stub/import noise for known third-party modules used by the project.
[mypy-docling]
ignore_missing_imports = True

[mypy-docling.*]
ignore_missing_imports = True

[mypy-llama_parse]
ignore_missing_imports = True

[mypy-psutil]
ignore_missing_imports = True

[mypy-openpyxl]
ignore_missing_imports = True

[mypy-sklearn]
ignore_missing_imports = True

[mypy-sklearn.*]
ignore_missing_imports = True

[mypy-transformers]
ignore_missing_imports = True

[mypy-transformers.*]
ignore_missing_imports = True

[mypy-openai]
ignore_missing_imports = True

[mypy-clip]
ignore_missing_imports = True

[mypy-nltk]
ignore_missing_imports = True

[mypy-sentence_transformers]
ignore_missing_imports = True

[mypy-sentence_transformers.*]
ignore_missing_imports = True
